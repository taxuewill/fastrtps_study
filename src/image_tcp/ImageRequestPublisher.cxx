// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file ImageRequestPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/publisher/Publisher.h>
#include <fastrtps/attributes/PublisherAttributes.h>

#include <fastrtps/Domain.h>

#include <fastrtps/utils/eClock.h>
#include <fastrtps/transport/TCPv4TransportDescriptor.h>
#include "opencv2/highgui/highgui.hpp"
#include "Utils.h"
#include <unistd.h>
#include "ImageRequestPublisher.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

ImageRequestPublisher::ImageRequestPublisher() : mp_participant(nullptr), mp_publisher(nullptr) {}

ImageRequestPublisher::~ImageRequestPublisher() { Domain::removeParticipant(mp_participant); }

bool ImageRequestPublisher::init()
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.builtin.domainId = 0;
    PParam.rtps.setName("Participant_publisher"); //You can put here the name you want
    PParam.rtps.useBuiltinTransports = false;
    std::shared_ptr<TCPv4TransportDescriptor> descriptor = std::make_shared<TCPv4TransportDescriptor>();
    descriptor->wait_for_tcp_negotiation = false;
    descriptor->sendBufferSize = 0;
    descriptor->receiveBufferSize = 0;
    descriptor->add_listener_port(8888);
    PParam.rtps.userTransports.push_back(descriptor);


    mp_participant = Domain::createParticipant(PParam);
    if (mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType *>(&myType));

    // Create Publisher

    PublisherAttributes Wparam;
    Wparam.topic.topicKind = NO_KEY;
    Wparam.topic.topicDataType = myType.getName(); //This type MUST be registered
    Wparam.qos.m_publishMode.kind = ASYNCHRONOUS_PUBLISH_MODE;
    Wparam.topic.topicName = "ImageRequestPubSubTopic";

    mp_publisher = Domain::createPublisher(mp_participant, Wparam, static_cast<PublisherListener *>(&m_listener));

    if (mp_publisher == nullptr)
    {
        return false;
    }

    std::cout << "Publisher created, waiting for Subscribers." << std::endl;
    return true;
}

void ImageRequestPublisher::PubListener::onPublicationMatched(Publisher *pub, MatchingInfo &info)
{
    (void)pub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "Publisher matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "Publisher unmatched" << std::endl;
    }
}

void ImageRequestPublisher::run()
{

    int width = 1280, height = 720;
    cv::VideoCapture cap;
    cv::Mat frame;

    cap.open(2);
    cap.set(cv::CAP_PROP_FRAME_WIDTH, static_cast<double>(width));
    cap.set(cv::CAP_PROP_FRAME_HEIGHT, static_cast<double>(height));
    cap.set(cv::CAP_PROP_FOURCC, cv::VideoWriter::fourcc('M', 'J', 'P', 'G'));
    if (!cap.isOpened())
    {
        std::cout << "Could not open video stream 0" << std::endl;
        return;
    }

    while (m_listener.n_matched == 0)
    {
        eClock::my_sleep(250); // Sleep 250 ms
    }

    // Publication code

    ImageMessage st;

    /* Initialize your structure here */

    int msgsent = 0;
    char ch = 'y';
    do
    {
        cap >> frame;
        //std::cout << "step is " << frame.step << std::endl;
        size_t size = frame.step * frame.rows;
        std::vector<char> dataVec;
        dataVec.resize(size);
        memcpy(&dataVec[0], frame.data, size);
        std::cout << "data size is " << size << std::endl;
        st.data(dataVec);
        st.remote_time(getCurrentTimestamp());
        st.seq(msgsent);
        mp_publisher->write(&st);
        usleep(25*1000);
        ++msgsent;
        std::cout << "Sending sample, count=" << msgsent << std::endl;

    } while (true);
}
