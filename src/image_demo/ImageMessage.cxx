// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file ImageMessage.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "ImageMessage.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

ImageMessage::ImageMessage()
{

    m_seq = 0;



}

ImageMessage::~ImageMessage()
{
}

ImageMessage::ImageMessage(const ImageMessage &x)
{
    m_frame_id = x.m_frame_id;
    m_seq = x.m_seq;
    m_data = x.m_data;
}

ImageMessage::ImageMessage(ImageMessage &&x)
{
    m_frame_id = std::move(x.m_frame_id);
    m_seq = x.m_seq;
    m_data = std::move(x.m_data);
}

ImageMessage& ImageMessage::operator=(const ImageMessage &x)
{
    m_frame_id = x.m_frame_id;
    m_seq = x.m_seq;
    m_data = x.m_data;

    return *this;
}

ImageMessage& ImageMessage::operator=(ImageMessage &&x)
{
    m_frame_id = std::move(x.m_frame_id);
    m_seq = x.m_seq;
    m_data = std::move(x.m_data);

    return *this;
}

size_t ImageMessage::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

size_t ImageMessage::getCdrSerializedSize(const ImageMessage& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

void ImageMessage::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_frame_id;
    scdr << m_seq;
    scdr << m_data;
}

void ImageMessage::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_frame_id;
    dcdr >> m_seq;
    dcdr >> m_data;
}

size_t ImageMessage::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            




    return current_align;
}

bool ImageMessage::isKeyDefined()
{
    return false;
}

void ImageMessage::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
}