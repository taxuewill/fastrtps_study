// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file ImageRequestSubscriber.cpp
 * This file contains the implementation of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/subscriber/Subscriber.h>
#include <fastrtps/attributes/SubscriberAttributes.h>

#include <fastrtps/Domain.h>

#include "opencv2/highgui/highgui.hpp"

#include "ImageRequestSubscriber.h"
#include <fstream>


using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

ImageRequestSubscriber::ImageRequestSubscriber() : mp_participant(nullptr), mp_subscriber(nullptr) {}

ImageRequestSubscriber::~ImageRequestSubscriber() {	Domain::removeParticipant(mp_participant);}

bool ImageRequestSubscriber::init()
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.builtin.domainId = 0; //MUST BE THE SAME AS IN THE PUBLISHER
    PParam.rtps.setName("Participant_subscriber"); //You can put the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    // Create Subscriber

    SubscriberAttributes Rparam;
    Rparam.topic.topicKind = NO_KEY;
    Rparam.topic.topicDataType = myType.getName(); //Must be registered before the creation of the subscriber
    Rparam.topic.topicName = "ImageRequestPubSubTopic";
    mp_subscriber = Domain::createSubscriber(mp_participant,Rparam, static_cast<SubscriberListener*>(&m_listener));
    if(mp_subscriber == nullptr)
    {
        return false;
    }
    return true;
}

void ImageRequestSubscriber::SubListener::onSubscriptionMatched(Subscriber* sub,MatchingInfo& info)
{
    (void)sub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "Subscriber matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "Subscriber unmatched" << std::endl;
    }
}

void ImageRequestSubscriber::SubListener::onNewDataMessage(Subscriber* sub)
{
    // Take data
    ImageMessage st;

    if(sub->takeNextData(&st, &m_info))
    {
        if(m_info.sampleKind == ALIVE)
        {
            // Print your structure data here.
            ++n_msg;
            if(n_msg<=1000){
                caculator.feedTime(getCurrentTimestamp()-st.remote_time());
            }
            if(n_msg == 1000){
                caculator.dumpResult();
            }
          //  if(10 == n_msg%10)
                // std::cout << "count=" << n_msg <<",seq is "<<st.seq()<< std::endl;
            if((lastSeq+1)!= st.seq() ){
                std::cout<<"..... lose record "<<(st.seq()-lastSeq-1)<<std::endl;
                
            }
            lastSeq = st.seq();

            //  std::string fileName("./rgb_");
            //  fileName+=n_msg;
            //  std::ofstream * outputFile = new std::ofstream(fileName);
            //  outputFile->write(&(st.data()[0]),1280*720*3);
            //  delete outputFile;


       
      

        // Show the image in a window called "showimage".
        // cv::imshow("showimage", frame);
        // Draw the screen and wait for 1 millisecond.
        // cv::waitKey(1);  
        }
    }
}

void ImageRequestSubscriber::run()
{
    std::cout << "Waiting for Data, press Enter to stop the Subscriber. "<<std::endl;
    std::cin.ignore();
    std::cout << "Shutting down the Subscriber." << std::endl;
}

